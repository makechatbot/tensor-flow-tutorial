import tensorflow as tf
from tensorflow.contrib import rnn

import numpy as np


def transposeTest1(perm):
    print("------------------------")
    x = [[1, 2, 3],
         [4, 5, 6]]
    print("x",x)
    print("perm 이 = ",perm, " 일 때 ")
    transPose1 = tf.transpose(x, perm=perm);
    with tf.Session() as sess:
        out = sess.run(transPose1)
        print("y 값은 ",out)
    print("------------------------")

def transposeTest2(perm):
    print("------------------------")
    x = [[[1, 2, 3], [4, 5, 6]],
         [[7, 8, 9], [10, 11, 12]],
         [[13, 14, 15], [16, 17, 18]],
         [[19, 20, 21], [22, 23, 24]]]


    print("x",x)

    print("x[", len(x), "][", len(x[0]), "][", len(x[0][0]), "]")
    print("perm 이 = ", perm, " 일 때 ")
    transPose1 = tf.transpose(x, perm=perm);
    with tf.Session() as sess:
        out = sess.run(transPose1)
        print("y 값은 ", out)
        print("y[",len(out),"][",len(out[0]), "][",len(out[0][0]), "]")
    print("------------------------")


# transposeTest1([0,1])
# transposeTest1([1,0])
# transposeTest2([0,1, 2])
# transposeTest2([0,2,1])
# transposeTest2([1,0,2])
# transposeTest2([2,1,0])
transposeTest2([2,0,1])
transposeTest2([1,2,0])
descript = """
permutation 는 치환, 순열, 바꾸기를 사전적인 의미를 가진다. 이 곳에서는 dimensions에 관한 변환이다.

perm[0, 1]
일 때
차원 0 를 차원 0으로 변환
차원 1 를 차원 1으로 변환
그러므로 변화되는 것이 없는 것이다.

------------------------
x [[1, 2, 3], [4, 5, 6]]
perm 이 =  [0, 1]  일 때
y 값은
[[1 2 3]
 [4 5 6]]
------------------------
------------------------
x [[1, 2, 3], [4, 5, 6]]
perm 이 =  [1, 0]  일 때
y 값은
[[1 4]
 [2 5]
 [3 6]]


    y       = x
    [0][0] = [0][0]{=1}
    [0][1] = [1][0]{=4}

    [1][0] = [0][1]{=2}
    [1][1] = [1][1]{=5}

    [2][0] = [0][2]{=3}
    [2][1] = [1][2]{=6}

    x     ==> y
    [0][0]{=1} => [0][0]
    [0][1]{=2} => [1][0]
    [0][2]{=3} => [2][0]
    [1][0]{=4} => [0][1]
    [1][1]{=5} => [1][1]
    [1][2]{=6} => [2][1]
---------------
x[4][2][3] 가
[
    [
        [1, 2, 3],
        [4, 5, 6]
    ],
    [
        [7, 8, 9],
        [10, 11, 12]
    ],
    [
        [13, 14, 15],
        [16, 17, 18]
    ],
    [
        [19, 20, 21],
        [22, 23, 24]
    ]
]
perm 이 =  [0, 1, 2]  일 때

y 값은
[[[ 1  2  3]
  [ 4  5  6]]

 [[ 7  8  9]
  [10 11 12]]

 [[13 14 15]
  [16 17 18]]

 [[19 20 21]
  [22 23 24]]]

즉 달라지는 것이 없다.

------------------------

입력된 숫자를 output의 인덱스로 보내겠다는 의미이다.

perm[0,1,2] 이라면
차원 0 를 차원 0으로 변환
차원 1 를 차원 1으로 변환
차원 2 를 차원 2으로 변환
그러므로 변화되는 것이 없는 것이다.


perm=[1,2,0].
라고 가정하면
차원 1 를 차원 0으로 변환
차원 2 를 차원 1으로 변환
차원 0 를 차원 2으로 변환

x[ 4 ][ 2 ][ 3 ]
perm 이 =  [1, 2, 0]  일 때
y[x[1]{=2}][x[2]{=3}][x[0]{=4}]
y 값은
[[[ 1  7 13 19]
  [ 2  8 14 20]
  [ 3  9 15 21]]

 [[ 4 10 16 22]
  [ 5 11 17 23]
  [ 6 12 18 24]]]
y[ 2 ][ 3 ][ 4 ]

------------------------
x [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]
x[ 4 ][ 2 ][ 3 ]
perm 이 =  [1, 2, 0]  일 때
y 값은  [[[ 1  7 13 19]
  [ 2  8 14 20]
  [ 3  9 15 21]]

 [[ 4 10 16 22]
  [ 5 11 17 23]
  [ 6 12 18 24]]]
y[ 2 ][ 3 ][ 4 ]
------------------------

"""

print(descript)